{"version":3,"sources":["navbar.js","store.js","budget/InputBudget.js","budget/InputExpenses.js","display/BalanceDisplay.js","display/ExpenseList.js","display/DisplayBudget.js","budget/Budget.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Component","BudgetContext","React","createContext","reducer","state","action","type","budget","expenses","BudgetProvider","dispatch","setState","Provider","value","this","props","children","BudgetConsumer","Consumer","InputBudget","handleInput","e","target","handleSubmit","preventDefault","onChange","onClick","bind","InputExpenses","expenseTitle","amount","name","addExpenses","title","onSubmit","BalanceDisplay","totalExpense","length","reduce","acc","curr","parseInt","ExpenseList","expensesList","map","expense","index","key","DisplayBudget","Budget","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85a7d4d8.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Navbar extends Component{\n    render(){\n        return (\n            <div className='navbar navbar-light bg-dark'>\n                <div className='container'>\n                    <h2 className='text-white'>Budget Tracker</h2>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, {Component } from 'react';\n\nconst BudgetContext = React.createContext();\n\nconst reducer = (state, action) => {\n    switch(action.type){\n        case \"ADD_BUDGET\":\n            return{\n                ...state,\n                budget: action.budget\n            };\n            case \"ADD_EXPENSES\":\n                return{\n                    ...state,\n                    expenses:action.expenses\n                }\n\n            default:\n                return state    \n    }\n}\n\nclass BudgetProvider extends Component{\n    state={\n        budget:'',\n        expenses:[],\n        dispatch:action => this.setState(state => reducer(state,action))\n    }\n    render(){\n        return(\n            <BudgetContext.Provider value={this.state}>\n                {this.props.children}\n            </BudgetContext.Provider>\n        )\n    }\n} \n\nconst BudgetConsumer = BudgetContext.Consumer;\n\nexport{BudgetProvider, BudgetConsumer};","import React, {Component} from 'react';\nimport {BudgetConsumer} from '../store';\n\nclass InputBudget extends Component{\n    state = {\n        budget:''\n    }\n    handleInput = (e) => {\n        this.setState({budget: e.target.value})\n    }\n    handleSubmit = (dispatch, e) =>{\n        e.preventDefault()\n        dispatch({\n            type: \"ADD_BUDGET\",\n            budget:this.state.budget\n        }) \n    }\n\n\n    render(){\n        return(\n            <BudgetConsumer>\n                {value => {\n                    const { dispatch } = value\n                    return(\n                        <div className='card card-body mb-3'>\n                        <label>Your Budget</label>\n                        <form className='form-inline'>\n                            <input \n                                onChange={this.handleInput}\n                                value={this.state.budget}\n                                className='form-control mr-2' \n                                type='number'>\n                            </input>\n                            <button onClick={this.handleSubmit.bind(this,dispatch)} className='btn btn-dark'>Submit</button>\n                        </form>\n        \n                    </div>\n\n                    )\n                }}\n            </BudgetConsumer>\n          \n        )\n    }\n}\n\nexport default InputBudget;","import React, {Component} from 'react';\nimport {BudgetConsumer} from '../store';\n\nclass InputExpenses extends Component{\n    state={\n        expenses:[],\n        expenseTitle:'',\n        amount:''\n    }\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    handleSubmit=(dispatch,e) =>{\n        e.preventDefault()\n        dispatch({\n            type:\"ADD_EXPENSES\",\n            expenses:this.state.expenses\n        })\n    }\n    addExpenses = () =>{\n        this.setState({\n            expenses:[\n                ...this.state.expenses,\n                {title:this.state.expenseTitle,amount:this.state.amount}\n            ]\n        })\n    }\n\n    render(){\n        return(\n            <BudgetConsumer>\n                {value =>{\n                    const {dispatch} = value\n                    return(\n                        <div className='card card-body'>\n                        <form onSubmit={this.handleSubmit.bind(this,dispatch)}>\n                            <label>Expense</label>\n                            <input \n                                onChange={this.handleInput}\n                                value={this.state.expenseTitle}\n                                className='form-control'\n                                name=\"expenseTitle\"\n                            />\n                            <label>Amount</label>\n                            <input \n                                onChange={this.handleInput}\n                                value={this.state.amount}\n                                className='form-control'\n                                name='amount'>\n        \n                            </input>\n                            <button onClick={this.addExpenses} className='btn btn-dark btn-block mt-3'>Submit</button>\n                        </form>\n        \n                    </div>\n\n                    )\n                }}\n            </BudgetConsumer>\n           \n        )\n    }\n}\n\nexport default InputExpenses;","import React,{Component} from 'react';\nimport {BudgetConsumer} from '../store';\n\nconst BalanceDisplay =()=>{\n    return(\n        <BudgetConsumer>\n            {value =>{\n                const totalExpense = value.expenses.length > 0?(\n                    value.expenses.reduce((acc, curr)=>{\n                        acc+= parseInt(curr.amount)\n                        return acc\n                    },0)) : 0;\n\n                    return (\n            \n                        <div className='row'>\n                            <div className='col-lg-4'>\n                                <div className='card'>\n                                    <div className='card-header'>Budget</div>\n                                    <div className='card-body'>\n                                        <h5 className='text-center card-tilte'>{value.budget}</h5>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='col-lg-4'>\n                                <div className='card'>\n                                    <div className='card-header'>Expenses</div>\n                                    <div className='card-body'>\n                                        <h5 className='text-center card-tilte'>{totalExpense}</h5>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='col-lg-4'>\n                                <div className='card'>\n                                    <div className='card-header'>Balance</div>\n                                    <div className='card-body'>\n                                        <h5 className='text-center card-tilte'>{value.budget - totalExpense}</h5>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </div>\n                    )\n        }}\n        </BudgetConsumer>\n    )\n}\n\nexport default BalanceDisplay;","import React,{Component} from 'react';\nimport {BudgetConsumer} from '../store';\n\nclass ExpenseList extends Component{\n    render(){\n        return(\n            <div className='card mt-5'>\n                <table className='table-bordered'>\n                    <thead>\n                        <tr>\n                            <th>Title</th>\n                            <th>Amount</th>\n                        </tr>\n                    </thead>\n                    <BudgetConsumer>\n                        {value=>{\n                            const expensesList =  value.expenses.length > 0 ? (\n                                value.expenses.map( (expense,index) => {\n                                    return (\n                                        <tr key={index}>\n                                            <td>{expense.title}</td>\n                                            <td>{expense.amount}</td>\n                                        </tr>\n                                    )\n                                })\n                            ) : (\n                                <tr>\n                                    <td>No Listed Expense Yet </td>\n                                </tr>\n                            )\n                            return <tbody>{expensesList}</tbody>\n                        }}\n                    </BudgetConsumer>\n                    \n                </table>\n            </div>\n        )\n\n    }     \n}\n\nexport default ExpenseList;","import React from 'react';\nimport BalanceDisplay from './BalanceDisplay';\nimport ExpenseList from './ExpenseList';\n\n\nconst DisplayBudget =() =>{\n    return (\n        <div className='card card-body'>\n            <h3 className = 'text-center'>Yout Budget Info</h3>\n            <BalanceDisplay />\n            <ExpenseList />\n        </div>\n    )\n}\n\nexport default DisplayBudget;","import React from 'react';\nimport InputBudget from './InputBudget';\nimport InputExpenses from './InputExpenses';\nimport DisplayBudget from '../display/DisplayBudget';\n\n\nconst Budget = () =>{\n    return(\n        <div className='row'>\n            <div className='col-lg-4'>\n                    <InputBudget/>\n                    <InputExpenses/>\n            </div>\n            <div className='col-lg-8'>\n                <DisplayBudget />\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Budget;","import React,{Component} from 'react';\nimport Navbar from './navbar';\nimport Budget from './budget/Budget';\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    return(\n      <div className='App'>\n        <Navbar />\n        <div className='container my-5'>\n          <Budget />\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BudgetProvider} from './store';\n\nReactDOM.render(\n    <BudgetProvider>\n        <App/>\n    </BudgetProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}